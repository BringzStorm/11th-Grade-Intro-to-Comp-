// FinalProjectDraft.cpp : Defines the entry point for the console application.
// Nichol, Orien, Wyatt, Akash

/*
Hi, Welcome to WcDonald's New Fake Offline Ordering Program!
This program will allow you to order food items by entering the corresponding number. 
It will then output a list of your orders, the tax and totals - Just like a normal restaurant!
Afterwards, the receipt will be put into a .txt file, fuond in the same folder as the program.
Hope you have fun and spend a crap ton of virtual money!
- Developers of this 10/10 program
*/

#include "stdafx.h"
#include <iostream>
#include <string>
#include <fstream>
#include <iomanip>

using namespace std;

// Function Parameters 
void displayMenu();
void displayReceipt(double &totalCost, float &tax);
void printReceipt(double, double, double);

// Global Variables and Arrays
int i = 0;
double itemPrice[15] = { 46.99, 4.99, 0.87, 17.79, 1.03, 13.99, 4.99, 14.99, 10.99, 29.99, 23.99, 25.99, 0.99, 99.99, 0.15 };
string itemName[15] = { "Pizza", "Meal of Depression", "Turkey Burger", "Liberty Sandwich", "Veggie Burger", "Fountain of Freedom", "Alcohol", "Milk", "Lemonade", "Smoothie", "Icecream Nugget", "Oreo Pizza", "Icecream Cone", "Liberty Pie", "???" };
double orderPrice[30] = { 0 };
string orderName[30] = { "" };

int main()
{
	// Main Function Variables
	string HangmanChoice = "";
	int itemNum;
	float tax;
	bool endLoop = false;
	double totalCost = 0;
	double tips;

	// Beginning of Log File
	ofstream logAction;

	logAction.open("Program Log.txt", ios::app);
	if (logAction.is_open() == false) {
		cout << "Error: Log File Failed to Open" << endl;
		return 0;
	}

		logAction << "----- Begin Log -----" << endl << endl;

	displayMenu(); // Display Menu
		logAction << "Menu Load Successful" << endl;

	cout << endl;
	cout << "Welcome to WcDonalds, how may we help you?" << endl;

	// Loop for ordering items
	while (endLoop == false && i < 30) {

		cout << endl << "Order (0 to stop): ";
		cin >> itemNum;
		logAction << "Order Item: # " << itemNum << endl;

		// If statement to check if order is valid (Between 1 and 15) 
		if (itemNum > 0 && itemNum <= 15) {

			orderPrice[i] = itemPrice[itemNum - 1]; //Wyatt's Code
			orderName[i] = itemName[itemNum - 1]; // Takes the price and name of the ordered item, and stores them into 2 different arrays
			logAction << "Name: " << orderName[i] << "| Price: " << orderPrice[i] << endl;

			totalCost = totalCost + itemPrice[itemNum - 1];
			i++; // the variable i keeps track of the number of items ordered
		}
		// Order Everything
		else if (itemNum == 100 && i == 0) {
			while (i < 15) {
				orderPrice[i] = itemPrice[i];
				orderName[i] = itemName[i];
				logAction << "Name: " << orderName[i] << "| Price: " << orderPrice[i] << endl;

				totalCost = totalCost + itemPrice[i];
				i++;
			}
			endLoop = true;
		}
		// The else if statement for finishing Orders
		else if (itemNum == 0) {

			if (i < 3) {
				cout << "Please order atleast [" << 3 - i << "] more items" << endl;
				logAction << "# of Orders < 3" << endl;
			}
			else {
				endLoop = true;
			}
		}
		else {
			cout << endl;
			cout << "Error: Invalid Item Number" << endl << endl;
			logAction << "Invalid Order" << endl;
		}

	}

	// Calls DisplayReceipt function
	displayReceipt(totalCost, tax);
	logAction << "Display Receipt Successful" << endl;

	// Tips and End of Program
	cout << "Tips: $"; // Wyatt's Code
	cin >> tips;
	totalCost = totalCost + tips;
	logAction << "Tips: $" << tips << endl;
	logAction << "Total Cost: " << totalCost << endl;
	cout << "-------------------------------------" << endl;
	cout << "                                New Total" << endl;
	cout << "                                " << totalCost << endl;
	cout << "-------------------------------------" << endl;
	cout << endl << "   ~~~ Thank you! Come Again! ~~~" << endl;

	printReceipt(tax, tips, totalCost);
	logAction << "Print Receipt Successful" << endl;
	logAction << endl <<  "----- End Log -----" << endl << endl;

	return 0;
}

// Menu Function
void displayMenu() {
	cout << " ===============================================================================================================" << endl;
	cout << "|  Menu                                                                                                        |" << endl;
	cout << "|                                                                                                              |" << endl;
	cout << "|  Main                                 Drink                                Dessert                           |" << endl;
	cout << "|                                                                                                              |" << endl;
	cout << "|  (1) Pizza - ($46.99)                 (6) Fountain of Freedom - ($13.99)   (11) Icecream Nugget - ($23.99)   |" << endl;
	cout << "|  (2) Meal of Depression - ($4.99)     (7) Alcohol - ($4.99)                (12) Oreo Pizza - ($25.99)        |" << endl;
	cout << "|  (3) Turkey Burger - ($0.87)          (8) Milk - ($14.99)                  (13) Icecream Cone - ($0.99)      |" << endl;
	cout << "|  (4) Liberty Sandwich - ($17.79)      (9) Lemonade - ($10.99)              (14) Liberty Pie - ($99.99)       |" << endl;
	cout << "|  (5) Veggie Burger - ($1.03)          (10) Smoothie - ($29.99)             (15) ??? - ($0.15)                |" << endl;
	cout << "|                                                                                                              |" << endl;
	cout << "|  (100) Buy Everything                                                                                        |" << endl;
	cout << "|                                                                                                              |" << endl;
	cout << "| Caution: Safety not guarenteed, batteries not included                                                       |" << endl;
	cout << " ===============================================================================================================" << endl;
}

// DisplayReceipt Function, passes TotalCost and Tax by reference
void displayReceipt(double &totalCost, float &tax) {

	cout << endl << endl; // Orien's Code
	cout << "-------------------------------------" << endl;
	cout << "Item Name                       Price" << endl;
	cout << "-------------------------------------" << endl;

	// loop to display the name and price of the ordered items
	for (int l = 0; l < i; l++) {

		cout << orderName[l] << endl;
		cout << "                                " << orderPrice[l] << endl;

	}

	// Calculates the tax (12%) 
	tax = totalCost * 0.12;
	totalCost = totalCost + tax;

	cout << endl << "Tax" << endl;
	cout << fixed << setprecision(2);
	cout << "                                " << tax << endl;
	cout << "-------------------------------------" << endl;
	cout << "                                Total Price" << endl;
	cout << "                                " << totalCost << endl;
}

// Print Receipt Function
void printReceipt(double tax, double tips, double totalCost) {

	// Creates outfile and opens .txt file
	ofstream receipt; //Akash's Code

	receipt.open("receipt.txt", ios::out);

	if (receipt.is_open())
	{
		receipt << "       ~~~ WcDonalds ~~~" << endl;
		receipt << "~~~ Thank You! Come Again! ~~~" << endl;
		receipt << "------------------------------" << endl;

		// loop to output order name and price to the file
 		for (int l = 0; l < i; l++) {
			receipt << orderName[l] << endl;
			receipt << "\t \t \t" << orderPrice[l] << endl;
		}
		// outputs tax, tips and total to the file
		receipt << endl;
		receipt << fixed << setprecision(2);
		receipt << "Tax" << "\t \t \t" << tax << endl;
		receipt << "Tips" << "\t \t \t" << tips << endl;
		receipt << "------------------------------" << endl;
		receipt << "Total" << "\t \t \t" << totalCost;

		receipt.close();
	}

	else {
		cout << "Error: Receipt Failed to Print" << endl;
	}

}
